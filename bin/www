#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ahkili:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, console.log(`*** AHKILI SERVER RUNNING ON PORT ${port}  STARTED AT ${Date(Date.now())} ***`));
server.on('error', onError);
server.on('listening', onListening);

/**
 *
 * socket
 */
usersThisMonth = 0;
global.io = require("socket.io")(server);
global.io.sockets.on("connection", socket => {
    //console.log(socket.nsp.server.eio.clientsCount)
    //global.io.sockets.emit('from_server', { socketClients: socketClients });
    usersThisMonth++;
    global.io.sockets.emit('info', {
        clientsCount: socket.nsp.server.eio.clientsCount,
        usersThisMonth: usersThisMonth
    });


    console.log('[connection] : ' + socket.id + ' socketClients ' + socket.nsp.server.eio.clientsCount);

    socket.on('disconnect', (reason) => {
        // socketClients--;
        socketClients.splice(socketClients.indexOf(socket.id), 1)
        global.io.sockets.emit('from_server', socketClients);

        console.log('[disconnect] : ' + socket.id + ' socketClients ' + socketClients);
        global.io.sockets.emit('from_server', { socketClients: socketClients });
    })

    socket.on('error', (error) => {
        console.log('[ERROR] : ' + socket.id + ' ' + error);
    });

    socket.on('disconnecting', (reason) => {
        console.log('[disconnecting] : ' + socket.id + ' ' + reason);
    });


    //listen on new_message
    socket.on('broadcast_message', (data) => {
        //broadcast the new message
        //io.sockets.emit('message', { message: data.message, from: socket.id });
        io.sockets.emit('message', data);

    })
    socket.on('message', (data) => {
        //broadcast the new message
        //io.sockets.emit('message', { message: data.message, from: socket.id });
        io.sockets.emit('message', { data });
        if (data.to == 'all') {
            io.sockets.emit('message', { from: data.from, to: data.to, message: data.message });

        } else {
            io.sockets.to(data.to).emit('message', { message: data.message, from: socket.id });

        }

    })

    //listen on typing
    socket.on('typing', (data) => {
        socket.broadcast.emit('typing', socket.id)
    })

    socket.on('private_message', (data) => {
        console.log('to: ' + data.to);
        io.sockets.to(data.to).emit('message', { message: data.message, from: socket.id });
    })

    //end new


})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}